titlesPartOfNamesAsList = lapply(titlesPartOfNamesAsList, function(x) if (x == "Dona") NA else x)
return(factor(unlist(titlesPartOfNamesAsList)))
}
preprocessData = function(data, isTestData) {
data$Pclass = factor(data$Pclass)
data$Title = mapNamesToTitles(data$Name)
if (isTestData) {
data = subset(data, select=-c(Ticket, Cabin, Name))
} else {
data$Survived = factor(data$Survived)
data = subset(data, select=-c(Ticket, Cabin, PassengerId, Name))
}
}
dataFromFile = function(fileName, isTestData) {
data = read.csv(fileName, na.string="")
preprocessedData = preprocessData(data, isTestData)
return(preprocessedData)
}
trainingData = dataFromFile("train.csv", FALSE)
testData = dataFromFile("test.csv", TRUE)
testDataPassengerIds<- testData$PassengerId
testData = subset(testData, select=-c(PassengerId))
##Divide the training data to a training part and evaluation part
#indices <- sample(1:nrow(trainingData),nrow(trainingData)*0.75)
#trainingData.train<- trainingData[indices,]
#trainingData.test<- trainingData[-indices,]
#install C50 and add the lib
if(!require(C50)){
install.packages('C50')
}
library('C50')
set.seed(123)
#Print some data on things
trainingData.Cols<- 1:dim(trainingData)[2]
trainingData.factors <- trainingData.Cols[sapply(trainingData,is.factor)]
trainingData.numerics <- trainingData.Cols[!sapply(trainingData,is.factor)]
if(!require(tidyr)) {
install.packages("tidyr")
}
library(tidyr)
#tidy data
trainingData.tidy_factors<-gather(trainingData[,trainingData.factors],"feature","value",-1)
trainingData.tidy_numerics<-gather(cbind(Survived=trainingData[,1],trainingData[,trainingData.numerics]),"feature","value",-1)
if(!require(ggplot2)) {
install.packages("ggplot2")
}
library(ggplot2)
qplot(x=value,data=trainingData.tidy_factors,fill=Survived) + facet_grid(~feature,scales="free")
qplot(x=value,data=trainingData.tidy_numerics,fill=Survived) + facet_grid(~feature,scales="free")
if(!require(caret)) {
install.packages("caret")
}
library(caret)
if(!require(e1071)) {
install.packages("e1071")
}
library(e1071)
control <- trainControl(method="cv", number=10)
fit.c50 <- train(Survived~., data=trainingData, method="C5.0", metric="Accuracy", trControl=control,na.action = na.pass)
#Use C50 and predict on the test part
#C50training <-C5.0(Survived ~., data=trainingData.train )
#plot(C50training)
#trainingPredictions = predict(C50training, trainingData.test)
#table(trainingPredictions,trainingData.test$Survived)
#mean(trainingPredictions==trainingData.test$Survived)
#Create a prediction on the full training data and run it on the test data
#C50 <-C5.0(Survived ~., data=trainingData )
#plot(C50)
#testPredictions = predict(C50training, testData)
#Create the result of the prediction
#res <- cbind(PassengerId=testDataPassengerIds,Survived=as.character(testPredictions))
#write.csv(res,file="try2.csv",row.names = F)
fit.c50
workspaceDir = "/Users/michaeltzach/Developer/R/ex2/Titanic"
setwd(workspaceDir)
###Read and preprocess the training data
#turn na strings to empty strings to avoid issues when creating the model
#also, avoid turingn strings to factor automatically
mapNamesToTitles = function(y) {
namesAsChars = lapply(y, as.character)
firstPartOfNamesBeforeDots = lapply(namesAsChars, function(x) strsplit(x, '.', fixed = TRUE)[[1]][[1]])
titlesPartOfNamesAsList = lapply(firstPartOfNamesBeforeDots, function(x) strsplit(x, ', ', fixed = TRUE)[[1]][[2]])
#titlesPartOfNamesAsList = lapply(titlesPartOfNamesAsList, function(x) if (x == "Dona") NA else x)
return(factor(unlist(titlesPartOfNamesAsList)))
}
preprocessData = function(data, isTestData) {
data$Pclass = factor(data$Pclass)
data$Title = mapNamesToTitles(data$Name)
if (isTestData) {
data = subset(data, select=-c(Ticket, Cabin, Name))
} else {
data$Survived = factor(data$Survived)
data = subset(data, select=-c(Ticket, Cabin, PassengerId, Name))
}
}
dataFromFile = function(fileName, isTestData) {
data = read.csv(fileName, na.string="")
preprocessedData = preprocessData(data, isTestData)
return(preprocessedData)
}
trainingData = dataFromFile("train.csv", FALSE)
testData = dataFromFile("test.csv", TRUE)
testDataPassengerIds<- testData$PassengerId
testData = subset(testData, select=-c(PassengerId))
##Divide the training data to a training part and evaluation part
#indices <- sample(1:nrow(trainingData),nrow(trainingData)*0.75)
#trainingData.train<- trainingData[indices,]
#trainingData.test<- trainingData[-indices,]
#install C50 and add the lib
if(!require(C50)){
install.packages('C50')
}
library('C50')
set.seed(123)
#Print some data on things
trainingData.Cols<- 1:dim(trainingData)[2]
trainingData.factors <- trainingData.Cols[sapply(trainingData,is.factor)]
trainingData.numerics <- trainingData.Cols[!sapply(trainingData,is.factor)]
if(!require(tidyr)) {
install.packages("tidyr")
}
library(tidyr)
#tidy data
trainingData.tidy_factors<-gather(trainingData[,trainingData.factors],"feature","value",-1)
trainingData.tidy_numerics<-gather(cbind(Survived=trainingData[,1],trainingData[,trainingData.numerics]),"feature","value",-1)
if(!require(ggplot2)) {
install.packages("ggplot2")
}
library(ggplot2)
qplot(x=value,data=trainingData.tidy_factors,fill=Survived) + facet_grid(~feature,scales="free")
qplot(x=value,data=trainingData.tidy_numerics,fill=Survived) + facet_grid(~feature,scales="free")
if(!require(caret)) {
install.packages("caret")
}
library(caret)
if(!require(e1071)) {
install.packages("e1071")
}
library(e1071)
control <- trainControl(method="cv", number=10)
fit.c50 <- train(Survived~., data=trainingData, method="C5.0", metric="Accuracy", trControl=control,na.action = na.pass)
#Use C50 and predict on the test part
#C50training <-C5.0(Survived ~., data=trainingData.train )
#plot(C50training)
#trainingPredictions = predict(C50training, trainingData.test)
#table(trainingPredictions,trainingData.test$Survived)
#mean(trainingPredictions==trainingData.test$Survived)
#Create a prediction on the full training data and run it on the test data
#C50 <-C5.0(Survived ~., data=trainingData )
#plot(C50)
#testPredictions = predict(C50training, testData)
#Create the result of the prediction
#res <- cbind(PassengerId=testDataPassengerIds,Survived=as.character(testPredictions))
#write.csv(res,file="try2.csv",row.names = F)
fit.c50
workspaceDir = "/Users/michaeltzach/Developer/R/ex2/Titanic"
setwd(workspaceDir)
###Read and preprocess the training data
#turn na strings to empty strings to avoid issues when creating the model
#also, avoid turingn strings to factor automatically
mapNamesToTitles = function(y) {
namesAsChars = lapply(y, as.character)
firstPartOfNamesBeforeDots = lapply(namesAsChars, function(x) strsplit(x, '.', fixed = TRUE)[[1]][[1]])
titlesPartOfNamesAsList = lapply(firstPartOfNamesBeforeDots, function(x) strsplit(x, ', ', fixed = TRUE)[[1]][[2]])
#titlesPartOfNamesAsList = lapply(titlesPartOfNamesAsList, function(x) if (x == "Dona") NA else x)
return(factor(unlist(titlesPartOfNamesAsList)))
}
preprocessData = function(data, isTestData) {
data$Pclass = factor(data$Pclass)
data$Title = mapNamesToTitles(data$Name)
if (isTestData) {
data = subset(data, select=-c(Ticket, Cabin, Name))
} else {
data$Survived = factor(data$Survived)
data = subset(data, select=-c(Ticket, Cabin, PassengerId, Name))
}
}
dataFromFile = function(fileName, isTestData) {
data = read.csv(fileName, na.string="")
preprocessedData = preprocessData(data, isTestData)
return(preprocessedData)
}
trainingData = dataFromFile("train.csv", FALSE)
testData = dataFromFile("test.csv", TRUE)
testDataPassengerIds<- testData$PassengerId
testData = subset(testData, select=-c(PassengerId))
##Divide the training data to a training part and evaluation part
#indices <- sample(1:nrow(trainingData),nrow(trainingData)*0.75)
#trainingData.train<- trainingData[indices,]
#trainingData.test<- trainingData[-indices,]
#install C50 and add the lib
if(!require(C50)){
install.packages('C50')
}
library('C50')
set.seed(123)
#Print some data on things
trainingData.Cols<- 1:dim(trainingData)[2]
trainingData.factors <- trainingData.Cols[sapply(trainingData,is.factor)]
trainingData.numerics <- trainingData.Cols[!sapply(trainingData,is.factor)]
if(!require(tidyr)) {
install.packages("tidyr")
}
library(tidyr)
#tidy data
trainingData.tidy_factors<-gather(trainingData[,trainingData.factors],"feature","value",-1)
trainingData.tidy_numerics<-gather(cbind(Survived=trainingData[,1],trainingData[,trainingData.numerics]),"feature","value",-1)
if(!require(ggplot2)) {
install.packages("ggplot2")
}
library(ggplot2)
qplot(x=value,data=trainingData.tidy_factors,fill=Survived) + facet_grid(~feature,scales="free")
qplot(x=value,data=trainingData.tidy_numerics,fill=Survived) + facet_grid(~feature,scales="free")
if(!require(caret)) {
install.packages("caret")
}
library(caret)
if(!require(e1071)) {
install.packages("e1071")
}
library(e1071)
control <- trainControl(method="cv", number=10)
fit.c50 <- train(Survived~., data=trainingData, method="C5.0", metric="Accuracy", trControl=control,na.action = na.pass)
fit.c50$xlevels[["Title"]] <- union(fit.c50$xlevels[["Title"]], levels(testData$Cabin))
testPredictions = predict(fit.c50,testData,na.action = na.pass)
#Use C50 and predict on the test part
#C50training <-C5.0(Survived ~., data=trainingData.train )
#plot(C50training)
#trainingPredictions = predict(C50training, trainingData.test)
#table(trainingPredictions,trainingData.test$Survived)
#mean(trainingPredictions==trainingData.test$Survived)
#Create a prediction on the full training data and run it on the test data
#C50 <-C5.0(Survived ~., data=trainingData )
#plot(C50)
#testPredictions = predict(C50training, testData)
#Create the result of the prediction
res <- cbind(PassengerId=testDataPassengerIds,Survived=as.character(testPredictions))
write.csv(res,file="try2.csv",row.names = F)
workspaceDir = "/Users/michaeltzach/Developer/R/ex2/Titanic"
setwd(workspaceDir)
###Read and preprocess the training data
#turn na strings to empty strings to avoid issues when creating the model
#also, avoid turingn strings to factor automatically
mapNamesToTitles = function(y) {
namesAsChars = lapply(y, as.character)
firstPartOfNamesBeforeDots = lapply(namesAsChars, function(x) strsplit(x, '.', fixed = TRUE)[[1]][[1]])
titlesPartOfNamesAsList = lapply(firstPartOfNamesBeforeDots, function(x) strsplit(x, ', ', fixed = TRUE)[[1]][[2]])
return(factor(unlist(titlesPartOfNamesAsList)))
}
preprocessData = function(data, isTestData) {
data$Pclass = factor(data$Pclass)
data$Title = mapNamesToTitles(data$Name)
if (isTestData) {
data = subset(data, select=-c(Ticket, Cabin, Name))
} else {
data$Survived = factor(data$Survived)
data = subset(data, select=-c(Ticket, Cabin, PassengerId, Name))
}
}
dataFromFile = function(fileName, isTestData) {
data = read.csv(fileName, na.string="")
preprocessedData = preprocessData(data, isTestData)
return(preprocessedData)
}
trainingData = dataFromFile("train.csv", FALSE)
testData = dataFromFile("test.csv", TRUE)
testDataPassengerIds<- testData$PassengerId
testData = subset(testData, select=-c(PassengerId))
#install C50 and add the lib
if(!require(C50)){
install.packages('C50')
}
library('C50')
set.seed(123)
#Print some data on things
trainingData.Cols<- 1:dim(trainingData)[2]
trainingData.factors <- trainingData.Cols[sapply(trainingData,is.factor)]
trainingData.numerics <- trainingData.Cols[!sapply(trainingData,is.factor)]
if(!require(tidyr)) {
install.packages("tidyr")
}
library(tidyr)
#tidy data
trainingData.tidy_factors<-gather(trainingData[,trainingData.factors],"feature","value",-1)
trainingData.tidy_numerics<-gather(cbind(Survived=trainingData[,1],trainingData[,trainingData.numerics]),"feature","value",-1)
if(!require(ggplot2)) {
install.packages("ggplot2")
}
library(ggplot2)
qplot(x=value,data=trainingData.tidy_factors,fill=Survived) + facet_grid(~feature,scales="free")
qplot(x=value,data=trainingData.tidy_numerics,fill=Survived) + facet_grid(~feature,scales="free")
if(!require(caret)) {
install.packages("caret")
}
library(caret)
if(!require(e1071)) {
install.packages("e1071")
}
library(e1071)
control <- trainControl(method="cv", number=10)
fit.c50 <- train(Survived~., data=trainingData, method="C5.0", metric="Accuracy", trControl=control,na.action = na.pass)
fit.c50$xlevels[["Title"]] <- union(fit.c50$xlevels[["Title"]], levels(testData$Title))
fit.c50.testPredictions = predict(fit.c50,testData,na.action = na.pass)
#Create the result of the prediction
fit.c50.res <- cbind(PassengerId=testDataPassengerIds,Survived=as.character(fit.c50.testPredictions))
if(!require(rpart)) {
install.packages('rpart')
}
library(rpart)
#write.csv(fit.c50.res,file="try3.csv",row.names = F)
workspaceDir = "/Users/michaeltzach/Developer/R/ex2/Titanic"
setwd(workspaceDir)
###Read and preprocess the training data
#turn na strings to empty strings to avoid issues when creating the model
#also, avoid turingn strings to factor automatically
mapNamesToTitles = function(y) {
namesAsChars = lapply(y, as.character)
firstPartOfNamesBeforeDots = lapply(namesAsChars, function(x) strsplit(x, '.', fixed = TRUE)[[1]][[1]])
titlesPartOfNamesAsList = lapply(firstPartOfNamesBeforeDots, function(x) strsplit(x, ', ', fixed = TRUE)[[1]][[2]])
return(factor(unlist(titlesPartOfNamesAsList)))
}
preprocessData = function(data, isTestData) {
data$Pclass = factor(data$Pclass)
data$Title = mapNamesToTitles(data$Name)
if (isTestData) {
data = subset(data, select=-c(Ticket, Cabin, Name))
} else {
data$Survived = factor(data$Survived)
data = subset(data, select=-c(Ticket, Cabin, PassengerId, Name))
}
}
dataFromFile = function(fileName, isTestData) {
data = read.csv(fileName, na.string="")
preprocessedData = preprocessData(data, isTestData)
return(preprocessedData)
}
trainingData = dataFromFile("train.csv", FALSE)
testData = dataFromFile("test.csv", TRUE)
testDataPassengerIds<- testData$PassengerId
testData = subset(testData, select=-c(PassengerId))
#install C50 and add the lib
if(!require(C50)){
install.packages('C50')
}
library('C50')
set.seed(123)
#Print some data on things
trainingData.Cols<- 1:dim(trainingData)[2]
trainingData.factors <- trainingData.Cols[sapply(trainingData,is.factor)]
trainingData.numerics <- trainingData.Cols[!sapply(trainingData,is.factor)]
if(!require(tidyr)) {
install.packages("tidyr")
}
library(tidyr)
#tidy data
trainingData.tidy_factors<-gather(trainingData[,trainingData.factors],"feature","value",-1)
trainingData.tidy_numerics<-gather(cbind(Survived=trainingData[,1],trainingData[,trainingData.numerics]),"feature","value",-1)
if(!require(ggplot2)) {
install.packages("ggplot2")
}
library(ggplot2)
qplot(x=value,data=trainingData.tidy_factors,fill=Survived) + facet_grid(~feature,scales="free")
qplot(x=value,data=trainingData.tidy_numerics,fill=Survived) + facet_grid(~feature,scales="free")
if(!require(caret)) {
install.packages("caret")
}
library(caret)
if(!require(e1071)) {
install.packages("e1071")
}
library(e1071)
control <- trainControl(method="cv", number=10)
fit.c50 <- train(Survived~., data=trainingData, method="C5.0", metric="Accuracy", trControl=control,na.action = na.pass)
fit.c50$xlevels[["Title"]] <- union(fit.c50$xlevels[["Title"]], levels(testData$Title))
fit.c50.testPredictions = predict(fit.c50,testData,na.action = na.pass)
#Create the result of the prediction
fit.c50.res <- cbind(PassengerId=testDataPassengerIds,Survived=as.character(fit.c50.testPredictions))
#Create the rpart model
if(!require(rpart)) {
install.packages('rpart')
}
library(rpart)
if(!require(rattle)) {
install.packages('rattle')
}
if(!require(rpart.plot)) {
install.packages('rpart.plot')
}
library(rpart.plot)
rpart.trainingDataModel <- rpart(Survived~., data = trainingData)
#Plot the rpart model
fancyRpartPlot(rpart.trainingDataModel)
#write.csv(fit.c50.res,file="try3.csv",row.names = F)
install.packages('rattle')
install.packages('rpart.plot')
install.packages("rpart.plot")
workspaceDir = "/Users/michaeltzach/Developer/R/ex2/Titanic"
setwd(workspaceDir)
###Read and preprocess the training data
#turn na strings to empty strings to avoid issues when creating the model
#also, avoid turingn strings to factor automatically
mapNamesToTitles = function(y) {
namesAsChars = lapply(y, as.character)
firstPartOfNamesBeforeDots = lapply(namesAsChars, function(x) strsplit(x, '.', fixed = TRUE)[[1]][[1]])
titlesPartOfNamesAsList = lapply(firstPartOfNamesBeforeDots, function(x) strsplit(x, ', ', fixed = TRUE)[[1]][[2]])
return(factor(unlist(titlesPartOfNamesAsList)))
}
preprocessData = function(data, isTestData) {
data$Pclass = factor(data$Pclass)
data$Title = mapNamesToTitles(data$Name)
if (isTestData) {
data = subset(data, select=-c(Ticket, Cabin, Name))
} else {
data$Survived = factor(data$Survived)
data = subset(data, select=-c(Ticket, Cabin, PassengerId, Name))
}
}
dataFromFile = function(fileName, isTestData) {
data = read.csv(fileName, na.string="")
preprocessedData = preprocessData(data, isTestData)
return(preprocessedData)
}
trainingData = dataFromFile("train.csv", FALSE)
testData = dataFromFile("test.csv", TRUE)
testDataPassengerIds<- testData$PassengerId
testData = subset(testData, select=-c(PassengerId))
#install C50 and add the lib
if(!require(C50)){
install.packages('C50')
}
library('C50')
set.seed(123)
#Print some data on things
trainingData.Cols<- 1:dim(trainingData)[2]
trainingData.factors <- trainingData.Cols[sapply(trainingData,is.factor)]
trainingData.numerics <- trainingData.Cols[!sapply(trainingData,is.factor)]
if(!require(tidyr)) {
install.packages("tidyr")
}
library(tidyr)
#tidy data
trainingData.tidy_factors<-gather(trainingData[,trainingData.factors],"feature","value",-1)
trainingData.tidy_numerics<-gather(cbind(Survived=trainingData[,1],trainingData[,trainingData.numerics]),"feature","value",-1)
if(!require(ggplot2)) {
install.packages("ggplot2")
}
library(ggplot2)
qplot(x=value,data=trainingData.tidy_factors,fill=Survived) + facet_grid(~feature,scales="free")
qplot(x=value,data=trainingData.tidy_numerics,fill=Survived) + facet_grid(~feature,scales="free")
if(!require(caret)) {
install.packages("caret")
}
library(caret)
if(!require(e1071)) {
install.packages("e1071")
}
library(e1071)
control <- trainControl(method="cv", number=10)
fit.c50 <- train(Survived~., data=trainingData, method="C5.0", metric="Accuracy", trControl=control,na.action = na.pass)
fit.c50$xlevels[["Title"]] <- union(fit.c50$xlevels[["Title"]], levels(testData$Title))
fit.c50.testPredictions = predict(fit.c50,testData,na.action = na.pass)
#Create the result of the prediction
fit.c50.res <- cbind(PassengerId=testDataPassengerIds,Survived=as.character(fit.c50.testPredictions))
#Create the rpart model
if(!require(rpart)) {
install.packages('rpart')
}
library(rpart)
if(!require(rattle)) {
install.packages('rattle')
}
if(!require(rpart.plot)) {
install.packages('rpart.plot')
}
library(rpart.plot)
rpart.trainingDataModel <- rpart(Survived~., data = trainingData)
#Plot the rpart model
fancyRpartPlot(rpart.trainingDataModel)
#write.csv(fit.c50.res,file="try3.csv",row.names = F)
#Create the rpart model
if(!require(rpart)) {
install.packages('rpart')
}
library(rpart)
if(!require(rattle)) {
install.packages('rattle')
}
install.packages("cairoDevice")
install.packages("cairoDevice")
install.packages("RGtk2", depen=T)
install.packages("rattle", dependencies=TRUE)
install.packages('cairoDevice')
install.packages('RGtk2', dependencies = TRUE)
install.packages('RGtk2', dependencies = TRUE)
install.packages('RGtk2', dependencies = TRUE)
install.packages("rattle", repos="http://rattle.togaware.com", type="source")
install.packages("rattle", dependencies=TRUE)
install.packages("rattle", dependencies = T)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
R.home()
Sys.setenv(TZ='GMT')
install.packages("ggplot2")
install.packages("ggplot2")
system('defaults write org.R-project.R force.LANG en_US.UTF-8')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
